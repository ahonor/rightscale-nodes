package com.simplifyops.rundeck.plugin.resources

import com.dtolabs.rundeck.core.common.INodeSet
import com.dtolabs.rundeck.core.common.NodeEntryImpl
import com.dtolabs.rundeck.core.common.NodeSetImpl
import com.dtolabs.rundeck.core.plugins.configuration.ConfigurationException
import com.dtolabs.rundeck.core.resources.ResourceModelSource
import com.dtolabs.rundeck.core.resources.ResourceModelSourceException

import org.apache.log4j.Logger;

import com.sun.jersey.api.client.ClientHandlerException;
import com.sun.jersey.api.client.ClientRequest;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.filter.ClientFilter;
import com.sun.jersey.api.client.filter.LoggingFilter
import com.sun.jersey.api.representation.Form

import groovyx.gpars.GParsPool

public class RightscaleNodes implements ResourceModelSource {
    static Logger logger = Logger.getLogger(RightscaleNodes.class);

    /**
     * Configuration parameters.
     */
    private String email;
    private String password;
    private String account;
    private long refreshInterval;
    private String endpoint;
    private String username;

    /**
     * Time nodes were last updated.
     */
    private long lastRefresh = 0;
    /**
     * The nodeset filled by the query result.
     */
    private INodeSet nodeset;

    /**
     * Default constructor.
     * @param configuration Properties containing plugin configuration values.
     */
    public RightscaleNodes(Properties configuration) {

        email = configuration.getProperty(RightscaleNodesFactory.EMAIL)
        password = configuration.getProperty(RightscaleNodesFactory.PASSWORD)
        account = configuration.getProperty(RightscaleNodesFactory.ACCOUNT)
        endpoint = configuration.getProperty(RightscaleNodesFactory.ENDPOINT)
        username = configuration.getProperty(RightscaleNodesFactory.USERNAME)

        int refreshSecs = 30;
        final String refreshStr = configuration.getProperty(RightscaleNodesFactory.REFRESH_INTERVAL)
        if (null != refreshStr && !"".equals(refreshStr)) {
            try {
                refreshSecs = Integer.parseInt(refreshStr);
            } catch (NumberFormatException e) {
                logger.warn(RightscaleNodesFactory.REFRESH_INTERVAL + " value is not valid: " + refreshStr);
            }
        }
        refreshInterval = refreshSecs * 1000;
    }

    /**
     * validate required params are set. Used by factory
     * @throws ConfigurationException
     */
    public void validate() throws ConfigurationException {
        if (null == email) {
            throw new ConfigurationException("email is required");
        }
        if (null == password) {
            throw new ConfigurationException("password is required");
        }
        if (null == account) {
            throw new ConfigurationException("account is required");
        }
    }

    /**
     * Query RightScale for their servers and return them as Nodes.
     */
    @Override
    public synchronized INodeSet getNodes() throws ResourceModelSourceException {
        System.println("DEBUG: Inside getNodes()...")

        /**
         * Haven't got any nodes yet so get them synchronously.
         */
        if (null == nodeset) {
            System.println("DEBUG: Getting nodes synchronously first time.")
            updateNodeSet(query());

        } else {

            if (!needsRefresh()) {
                System.println("DEBUG: Nodes don't need a refresh.")
                return nodeset;
            }

            /**
             * Query asynchronously.
             */
            System.println("DEBUG: Asynchronously getting nodes.")
            Closure queryRequest = { updateNodeSet(query()) }
            GParsPool.withPool() {
                queryRequest.callAsync().get()
            }
        }

        /**
         * Return the nodeset
         */
        return nodeset;
    }

    /**
     * Update the NodeSet and reset the last refresh time.
     * @param nodeset
     */
    void updateNodeSet(final INodeSet nodeset) {
        this.nodeset = nodeset;
        lastRefresh = System.currentTimeMillis();
    }

    /**
     * Query the RightScale API for servers and map them to Nodes.
     *
     * @return nodeset of Nodes
     */
    INodeSet query() {
        /**
         * Setup API defaults
         */
        Rest.defaultHeaders = ["X-API-VERSION": "1.5"]
        Rest.baseUrl = endpoint;

        /**
         * Login and create a session
         */
        authenticate();

        /**
         * List Deployments
         */
        def deployments = queryDeployments();
        /**
         * List Clouds
         */
        def clouds = queryClouds();

        /**
         * List Servers
         */
        def servers = queryServers()

        /**
         * Create a node set for the result
         */
        INodeSet nodeset = new NodeSetImpl();

        System.out.println("DEBUG: Iterating over ${servers.size()} servers")
        servers.each { href, svr ->

            // Define a new Node
            NodeEntryImpl newNode = new NodeEntryImpl(svr.name);
            newNode.setDescription(svr.description)
            newNode.setAttribute("rs:state", svr.state)
            newNode.setAttribute("rs:created_at", svr.created_at)
            newNode.setOsFamily("unix");  // hard coded
            newNode.setUsername(username) // ..
            /**
             * Add a tag and attribute with the server's deployment.
             */
            def deployment_href = svr.deployment_href
            def deployment_name = deployments.containsKey(deployment_href) ? deployments.get(deployment_href).name : deployment_href

            newNode.setAttribute("rs:deployment", deployment_name.toString())
            if (!newNode.tags.contains("rs:${deployment_name}")) newNode.tags.add("rs:${deployment_name}")

            def tags = queryTags(svr.href)
            tags.each {
                if (!newNode.tags.contains(it)) newNode.tags.add("rs:${it}")
            }
            newNode.setAttribute("rs:tags", tags.toString())

            /**
             * Make an additional RightScale API request to get Instance level data
             */
            def instanceRequest = svr.current_instance_href as Rest
            instanceRequest.addFilter(new LoggingFilter(System.out))  // debug output

            def ClientResponse instanceResponse = instanceRequest.get([:], [view: "extended"])
            if (instanceResponse.status != 200) {
                throw new ResourceModelSourceException("RightScale instance request error. " + serversResponse)
            }
            def groovy.util.Node instance = instanceResponse.XML
            newNode.setAttribute("rs:resource_uid", instance.resource_uid.text())
            newNode.setAttribute("rs:public_ip_address", instance?.public_ip_addresses?.public_ip_address[0]?.text())
            newNode.setAttribute("rs:private_ip_address", instance?.private_ip_addresses?.private_ip_address[0]?.text())
            newNode.setAttribute("rs:public_dns_name", instance.public_dns_names?.public_dns_name[0]?.text())
            newNode.setAttribute("rs:private_dns_name", instance.private_dns_names?.private_dns_name[0]?.text())
            newNode.setAttribute("rs:user_data", instance.user_data.text())

            newNode.setHostname(instance.public_ip_addresses?.public_ip_address[0]?.text())

            /**
             * Make an additional RightScale API request to get ServerTemplate data
             */
            def server_template_href = instance.links.link.find { it.'@rel' == 'server_template' }?.'@href'
            def server_templates = queryServerTemplate(server_template_href)
            newNode.setAttribute("rs:server_template", server_templates.get(server_template_href).name)

            /**
             * Add a tag and attribute with the server's deployment.
             */
            def cloud_href = instance.links.link.find { it.'@rel' == 'cloud' }?.'@href'
            def cloud_name = clouds.containsKey(cloud_href) ? clouds.get(cloud_href).name : cloud_href

            if (!newNode.tags.contains("rs:${cloud_name}")) newNode.tags.add("rs:${cloud_name}")
            newNode.setAttribute("rs:cloud", cloud_name.toString())
            newNode.setAttribute("rs:cloud_type", clouds.get(cloud_href).cloud_type)

            /**
             * Make an additional RightScale API request to get Datacenter level data
             */
            def datacenter_href = instance.links.link.find { it.'@rel' == 'datacenter' }?.'@href'
            def datacenters = queryDatacenters(datacenter_href)
            newNode.setAttribute("rs:datacenter", datacenters.get(datacenter_href).name)

            def subnet_href = instance.subnets?.subnet[0].@href
            def subnets = querySubnets(subnet_href)
            newNode.setAttribute("rs:subnet", subnets.get(subnet_href).name)
            newNode.setAttribute("rs:subnet_visibility", subnets.get(subnet_href).state)
            newNode.setAttribute("rs:subnet_state", subnets.get(subnet_href).visibility)

            /**
             * Make an additional RightScale API request to get Image level data
             */
            def image_href = instance.links.link.find { it.'@rel' == 'image' }?.'@href'
            def images = queryImages(image_href)
            newNode.setAttribute("rs:image", images.get(image_href).name)
            newNode.setAttribute("rs:cpu_architecture", images.get(image_href).cpu_architecture)
            newNode.setAttribute("rs:virtualization_type", images.get(image_href).virtualization_type)
            newNode.setOsArch(images.get(image_href).cpu_architecture)

            /**
             * Make an additional RightScale API request to get InstanceType level data
             */
            def instance_type_href = instance.links.link.find { it.'@rel' == 'instance_type' }?.'@href'
            def instance_types = queryInstance_types(instance_type_href)
            newNode.setAttribute("rs:instance_type", instance_types.get(instance_type_href).name)
            newNode.setAttribute("rs:memory", instance_types.get(instance_type_href).memory)
            newNode.setAttribute("rs:cpu_speed", instance_types.get(instance_type_href).cpu_speed)
            newNode.setAttribute("rs:local_disks", instance_types.get(instance_type_href).local_disks)

            /**
             * Add the new node to the set
             */
            nodeset.putNode(newNode);


        }

        /**
         * Return the nodeset
         */
        return nodeset;
    }

    private Map queryServers() {
        def Map resources = [:]
        /**
         * Request the servers data as XML
         */
        def serversRequest = "/api/servers.xml" as Rest;
        serversRequest.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse serversResponse = serversRequest.get([:], [view: "instance_detail"]); // instance_detail contains extra info
        if (serversResponse.status != 200) {
            throw new ResourceModelSourceException("RightScale servers request error. " + serversResponse)
        }

        /**
         * Traverse the dom to get each of the server nodes
         */
        def groovy.util.Node servers = serversResponse.XML
        System.out.println("DEBUG: number of servers in response to GET /api/servers: " + servers.server.size())
        servers.server.each { svr ->
            def svr_href = svr.links.link.find { it.'@rel' == 'self' }?.'@href'
            System.out.println("DEBUG: server: " + svr_href)

            /**
             * If it doesn't have a name, ignore it.
             */
            if (null != svr.name.text()) {
                // Also, ignore servers that don't have an instance.
                def current_instance = svr.links.link.find { it.'@rel' == 'current_instance' }?.'@href'
                if (null != current_instance) {
                    System.out.println("DEBUG: current_instance: " + current_instance)
                    def model = [:]
                    model.href = svr_href
                    model.name = svr.name.text()
                    model.description = svr.description.text()
                    model.state = svr.state.text()
                    model.created_at = svr.created_at.text()
                    model.deployment_href = svr.links.link.find { it.'@rel' == 'deployment' }?.'@href'
                    model.current_instance_href = current_instance

                    resources.put(svr_href, model)
                } else {
                    System.println("DEBUG: Skipping over server with null current_instance")
                }
            } else {
                System.println("DEBUG: Skipping over server with a null name")
            }
        }
        System.out.println("DEBUG: number of servers returned in map: " + resources.size())

        return resources
    }

    /**
     *
     * @return Map of Deployments
     */
    private Map queryDeployments() {
        def Map resources = [:]
        def request = "/api/deployments.xml" as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale /api/deployments request error. " + response)
        }
        def Node root = response.XML
        root.deployment.each {
            def href = it.links.link.find { it.'@rel' == 'self' }?.'@href'
            def model = [:]
            model.href = href
            model.name = it.name.text()

            resources.put(href, model)
            System.out.println("DEBUG: added deployment " + model.name);
        }
        System.out.println("DEBUG: Number deployment resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of Clouds
     */
    private Map queryClouds() {
        def Map resources = [:]
        def request = "/api/clouds.xml" as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale /api/clouds request error. " + response)
        }
        def Node root = response.XML
        root.cloud.each {
            def href = it.links.link.find { it.'@rel' == 'self' }?.'@href'
            def model = [:]
            model.href = href
            model.name = it.name.text()
            model.description = it.description.text()
            model.cloud_type = it.cloud_type.text()

            resources.put(href, model)
            System.out.println("DEBUG: added cloud " + model.name);
        }
        System.out.println("DEBUG: Number cloud resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of Datacenters
     */
    private Map queryDatacenters(final String href) {
        def Map resources = [:]
        def request = href + '.xml' as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale ${href} request error. " + response)
        }
        def Node datacenter = response.XML

        def ref = datacenter.links.link.find { it.'@rel' == 'self' }?.'@href'
        def model = [:]
        model.href = ref
        model.name = datacenter.name.text()
        model.description = datacenter.description.text()
        model.resource_uid = datacenter.resource_uid.text()

        resources.put(href, model)
        System.out.println("DEBUG: added: " + model.name);

        System.out.println("DEBUG: Number resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of Subnets
     */
    private Map querySubnets(final String href) {
        def Map resources = [:]
        def request = href + '.xml' as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale ${href} request error. " + response)
        }
        def Node root = response.XML

        def ref = root.links.link.find { it.'@rel' == 'self' }?.'@href'
        def model = [:]
        model.href = ref
        model.name = root.name.text()
        model.description = root.description.text()
        model.state = root.state.text()
        model.resource_uid = root.resource_uid.text()
        model.cidr_block = root.cidr_block.text()
        model.is_default = root.is_default.text()
        model.visibility = root.visibility.text()

        resources.put(href, model)
        System.out.println("DEBUG: added: " + model.name);

        System.out.println("DEBUG: Number resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of ServerTemplates
     */
    private Map queryServerTemplate(final String href) {
        def Map resources = [:]
        def request = href + '.xml' as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale ${href} request error. " + response)
        }
        def Node root = response.XML

        def ref = root.links.link.find { it.'@rel' == 'self' }?.'@href'
        def model = [:]
        model.href = ref
        model.name = root.name.text()
        model.description = root.description.text()
        model.revision = root.revision.text()

        resources.put(href, model)
        System.out.println("DEBUG: added: " + model.name);

        System.out.println("DEBUG: Number resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of Images
     */
    private Map queryImages(final String href) {
        def Map resources = [:]
        def request = href + '.xml' as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale ${href} request error. " + response)
        }
        def Node root = response.XML

        def ref = root.links.link.find { it.'@rel' == 'self' }?.'@href'
        def model = [:]
        model.href = ref
        model.name = root.name.text()
        model.description = root.description.text()
        model.cpu_architecture = root.cpu_architecture.text()
        model.image_type = root.image_type.text()
        model.virtualization_type = root.virtualization_type.text()
        model.os_platform = root.os_platform.text()

        resources.put(href, model)
        System.out.println("DEBUG: added: " + model.name);

        System.out.println("DEBUG: Number resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of Instance_types
     */
    private Map queryInstance_types(final String href) {
        def Map resources = [:]
        def request = href + '.xml' as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.get([:], [:]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale ${href} request error. " + response)
        }
        def Node root = response.XML

        def ref = root.links.link.find { it.'@rel' == 'self' }?.'@href'
        def model = [:]
        model.href = ref
        model.name = root.name.text()
        model.description = root.description.text()
        model.memory = root.memory.text()
        model.cpu_architecture = root.cpu_architecture.text()
        model.local_disks = root.local_disks.text()
        model.local_disk_size = root.local_disk_size.text()
        model.cpu_count = root.cpu_count.text()
        model.cpu_speed = root.cpu_speed.text()

        resources.put(href, model)
        System.out.println("DEBUG: added: " + model.name);

        System.out.println("DEBUG: Number resources found: " + resources.size())
        return resources;
    }

    /**
     *
     * @return Map of Tags
     */
    private Collection queryTags(final String href) {
        def tags = []
        def request = '/api/tags/by_resource.xml' as Rest;
        request.addFilter(new LoggingFilter(System.out)); // debug output
        def ClientResponse response = request.post({}, [:], ["resource_hrefs[]": href]);
        if (response.status != 200) {
            throw new ResourceModelSourceException("RightScale ${href} tags request error. " + response)
        }
        def Node resource_tags = response.XML
        resource_tags.resource_tag.tags.tag.each {

            tags << it.name.text()
            System.out.println("DEBUG: added: " + it.name.text());

        }

        System.out.println("DEBUG: Number resources found: " + tags.size())
        return tags;
    }

    /**
     * Returns true if the last refresh time was longer ago than the refresh interval
     */
    private boolean needsRefresh() {
        return refreshInterval < 0 || (System.currentTimeMillis() - lastRefresh > refreshInterval);
    }

    /**
     * Login and create a session
     */
    private void authenticate() {
        // add a filter to set cookies received from the server and to check if login has been triggered
        Rest.client.addFilter(new ClientFilter() {
            private ArrayList<Object> cookies;

            @Override
            public ClientResponse handle(ClientRequest request) throws ClientHandlerException {
                if (cookies != null) {
                    request.getHeaders().put("Cookie", cookies);
                }
                ClientResponse response = getNext().handle(request);
                // copy cookies
                if (response.getCookies() != null) {
                    if (cookies == null) {
                        cookies = new ArrayList<Object>();
                    }
                    // A simple addAll just for illustration (should probably check for duplicates and expired cookies)
                    cookies.addAll(response.getCookies());
                }
                return response;
            }
        });

        WebResource sessionRequest = Rest.client.resource("${endpoint}/api/session");
        Form form = new Form();
        form.putSingle("email", email);
        form.putSingle("password", password);
        form.putSingle("account_href", "/api/accounts/${account}");
        def ClientResponse response = sessionRequest.header("X-API-VERSION", "1.5")
                .type("application/x-www-form-urlencoded").post(ClientResponse.class, form);
        /**
         * Check the response for http status (eg, 20x)
         */
        if (response.status != 204) {
            throw new ResourceModelSourceException("RightScale login error. " + response)
        }
    }
}